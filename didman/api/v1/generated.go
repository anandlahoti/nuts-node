// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	JwtBearerAuthScopes = "jwtBearerAuth.Scopes"
)

// A creation request for a compound service with endpoints and/or references to endpoints.
type CompoundService struct {
	Id string `json:"id"`

	// A map containing service references and/or endpoints.
	ServiceEndpoint map[string]interface{} `json:"serviceEndpoint"`

	// type of the endpoint. May be freely choosen.
	Type string `json:"type"`
}

// A creation request for a compound service that contains endpoints. The endpoints can be either absolute endpoints or references.
type CompoundServiceProperties struct {
	// A map containing service references and/or endpoints.
	ServiceEndpoint map[string]interface{} `json:"serviceEndpoint"`

	// type of the endpoint. May be freely choosen.
	Type string `json:"type"`
}

// A combination of type and URL.
type EndpointProperties struct {
	// An endpoint URL or a reference to another service.
	Endpoint string `json:"endpoint"`

	// type of the endpoint. May be freely choosen.
	Type string `json:"type"`
}

// EndpointResponse defines model for EndpointResponse.
type EndpointResponse struct {
	// The endpoint URL.
	Endpoint string `json:"endpoint"`
}

// AddCompoundServiceJSONBody defines parameters for AddCompoundService.
type AddCompoundServiceJSONBody = CompoundServiceProperties

// GetCompoundServiceEndpointParams defines parameters for GetCompoundServiceEndpoint.
type GetCompoundServiceEndpointParams struct {
	// Whether to resolve references. When true and the given endpoint is a reference it returns the endpoint of the referenced service.
	// If false it returns the reference itself. Defaults to true.
	Resolve *bool `form:"resolve,omitempty" json:"resolve,omitempty"`
}

// UpdateContactInformationJSONBody defines parameters for UpdateContactInformation.
type UpdateContactInformationJSONBody = ContactInformation

// AddEndpointJSONBody defines parameters for AddEndpoint.
type AddEndpointJSONBody = EndpointProperties

// SearchOrganizationsParams defines parameters for SearchOrganizations.
type SearchOrganizationsParams struct {
	// Query used for searching the organization by name. The query is matched to the organization's name in a SQL's "LIKE" fashion: it matches partial strings and also names that sound like the given query, using a phonetic transformation algorithm.
	Query string `form:"query" json:"query"`

	// Filters organizations by service of the given type in the organizations' DID document (optional).
	DidServiceType *string `form:"didServiceType,omitempty" json:"didServiceType,omitempty"`
}

// AddCompoundServiceJSONRequestBody defines body for AddCompoundService for application/json ContentType.
type AddCompoundServiceJSONRequestBody = AddCompoundServiceJSONBody

// UpdateContactInformationJSONRequestBody defines body for UpdateContactInformation for application/json ContentType.
type UpdateContactInformationJSONRequestBody = UpdateContactInformationJSONBody

// AddEndpointJSONRequestBody defines body for AddEndpoint for application/json ContentType.
type AddEndpointJSONRequestBody = AddEndpointJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCompoundServices request
	GetCompoundServices(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCompoundService request with any body
	AddCompoundServiceWithBody(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCompoundService(ctx context.Context, did string, body AddCompoundServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompoundServiceEndpoint request
	GetCompoundServiceEndpoint(ctx context.Context, did string, compoundServiceType string, endpointType string, params *GetCompoundServiceEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContactInformation request
	GetContactInformation(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContactInformation request with any body
	UpdateContactInformationWithBody(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContactInformation(ctx context.Context, did string, body UpdateContactInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddEndpoint request with any body
	AddEndpointWithBody(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddEndpoint(ctx context.Context, did string, body AddEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEndpointsByType request
	DeleteEndpointsByType(ctx context.Context, did string, pType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchOrganizations request
	SearchOrganizations(ctx context.Context, params *SearchOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteService request
	DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCompoundServices(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompoundServicesRequest(c.Server, did)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompoundServiceWithBody(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompoundServiceRequestWithBody(c.Server, did, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCompoundService(ctx context.Context, did string, body AddCompoundServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCompoundServiceRequest(c.Server, did, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompoundServiceEndpoint(ctx context.Context, did string, compoundServiceType string, endpointType string, params *GetCompoundServiceEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompoundServiceEndpointRequest(c.Server, did, compoundServiceType, endpointType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContactInformation(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContactInformationRequest(c.Server, did)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactInformationWithBody(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactInformationRequestWithBody(c.Server, did, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContactInformation(ctx context.Context, did string, body UpdateContactInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContactInformationRequest(c.Server, did, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddEndpointWithBody(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddEndpointRequestWithBody(c.Server, did, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddEndpoint(ctx context.Context, did string, body AddEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddEndpointRequest(c.Server, did, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEndpointsByType(ctx context.Context, did string, pType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEndpointsByTypeRequest(c.Server, did, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchOrganizations(ctx context.Context, params *SearchOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteService(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteServiceRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCompoundServicesRequest generates requests for GetCompoundServices
func NewGetCompoundServicesRequest(server string, did string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "did", runtime.ParamLocationPath, did)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/didman/v1/did/%s/compoundservice", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddCompoundServiceRequest calls the generic AddCompoundService builder with application/json body
func NewAddCompoundServiceRequest(server string, did string, body AddCompoundServiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCompoundServiceRequestWithBody(server, did, "application/json", bodyReader)
}

// NewAddCompoundServiceRequestWithBody generates requests for AddCompoundService with any type of body
func NewAddCompoundServiceRequestWithBody(server string, did string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "did", runtime.ParamLocationPath, did)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/didman/v1/did/%s/compoundservice", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCompoundServiceEndpointRequest generates requests for GetCompoundServiceEndpoint
func NewGetCompoundServiceEndpointRequest(server string, did string, compoundServiceType string, endpointType string, params *GetCompoundServiceEndpointParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "did", runtime.ParamLocationPath, did)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "compoundServiceType", runtime.ParamLocationPath, compoundServiceType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "endpointType", runtime.ParamLocationPath, endpointType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/didman/v1/did/%s/compoundservice/%s/endpoint/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Resolve != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resolve", runtime.ParamLocationQuery, *params.Resolve); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContactInformationRequest generates requests for GetContactInformation
func NewGetContactInformationRequest(server string, did string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "did", runtime.ParamLocationPath, did)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/didman/v1/did/%s/contactinfo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContactInformationRequest calls the generic UpdateContactInformation builder with application/json body
func NewUpdateContactInformationRequest(server string, did string, body UpdateContactInformationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContactInformationRequestWithBody(server, did, "application/json", bodyReader)
}

// NewUpdateContactInformationRequestWithBody generates requests for UpdateContactInformation with any type of body
func NewUpdateContactInformationRequestWithBody(server string, did string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "did", runtime.ParamLocationPath, did)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/didman/v1/did/%s/contactinfo", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddEndpointRequest calls the generic AddEndpoint builder with application/json body
func NewAddEndpointRequest(server string, did string, body AddEndpointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddEndpointRequestWithBody(server, did, "application/json", bodyReader)
}

// NewAddEndpointRequestWithBody generates requests for AddEndpoint with any type of body
func NewAddEndpointRequestWithBody(server string, did string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "did", runtime.ParamLocationPath, did)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/didman/v1/did/%s/endpoint", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEndpointsByTypeRequest generates requests for DeleteEndpointsByType
func NewDeleteEndpointsByTypeRequest(server string, did string, pType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "did", runtime.ParamLocationPath, did)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/didman/v1/did/%s/endpoint/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchOrganizationsRequest generates requests for SearchOrganizations
func NewSearchOrganizationsRequest(server string, params *SearchOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/didman/v1/search/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.DidServiceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "didServiceType", runtime.ParamLocationQuery, *params.DidServiceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteServiceRequest generates requests for DeleteService
func NewDeleteServiceRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internal/didman/v1/service/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCompoundServices request
	GetCompoundServicesWithResponse(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*GetCompoundServicesResponse, error)

	// AddCompoundService request with any body
	AddCompoundServiceWithBodyWithResponse(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompoundServiceResponse, error)

	AddCompoundServiceWithResponse(ctx context.Context, did string, body AddCompoundServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompoundServiceResponse, error)

	// GetCompoundServiceEndpoint request
	GetCompoundServiceEndpointWithResponse(ctx context.Context, did string, compoundServiceType string, endpointType string, params *GetCompoundServiceEndpointParams, reqEditors ...RequestEditorFn) (*GetCompoundServiceEndpointResponse, error)

	// GetContactInformation request
	GetContactInformationWithResponse(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*GetContactInformationResponse, error)

	// UpdateContactInformation request with any body
	UpdateContactInformationWithBodyWithResponse(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactInformationResponse, error)

	UpdateContactInformationWithResponse(ctx context.Context, did string, body UpdateContactInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactInformationResponse, error)

	// AddEndpoint request with any body
	AddEndpointWithBodyWithResponse(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddEndpointResponse, error)

	AddEndpointWithResponse(ctx context.Context, did string, body AddEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*AddEndpointResponse, error)

	// DeleteEndpointsByType request
	DeleteEndpointsByTypeWithResponse(ctx context.Context, did string, pType string, reqEditors ...RequestEditorFn) (*DeleteEndpointsByTypeResponse, error)

	// SearchOrganizations request
	SearchOrganizationsWithResponse(ctx context.Context, params *SearchOrganizationsParams, reqEditors ...RequestEditorFn) (*SearchOrganizationsResponse, error)

	// DeleteService request
	DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error)
}

type GetCompoundServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CompoundService
}

// Status returns HTTPResponse.Status
func (r GetCompoundServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompoundServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCompoundServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompoundService
}

// Status returns HTTPResponse.Status
func (r AddCompoundServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCompoundServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompoundServiceEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointResponse
}

// Status returns HTTPResponse.Status
func (r GetCompoundServiceEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompoundServiceEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContactInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactInformation
}

// Status returns HTTPResponse.Status
func (r GetContactInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContactInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContactInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContactInformation
}

// Status returns HTTPResponse.Status
func (r UpdateContactInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContactInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoint
}

// Status returns HTTPResponse.Status
func (r AddEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEndpointsByTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEndpointsByTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEndpointsByTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationSearchResult
}

// Status returns HTTPResponse.Status
func (r SearchOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCompoundServicesWithResponse request returning *GetCompoundServicesResponse
func (c *ClientWithResponses) GetCompoundServicesWithResponse(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*GetCompoundServicesResponse, error) {
	rsp, err := c.GetCompoundServices(ctx, did, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompoundServicesResponse(rsp)
}

// AddCompoundServiceWithBodyWithResponse request with arbitrary body returning *AddCompoundServiceResponse
func (c *ClientWithResponses) AddCompoundServiceWithBodyWithResponse(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCompoundServiceResponse, error) {
	rsp, err := c.AddCompoundServiceWithBody(ctx, did, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompoundServiceResponse(rsp)
}

func (c *ClientWithResponses) AddCompoundServiceWithResponse(ctx context.Context, did string, body AddCompoundServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCompoundServiceResponse, error) {
	rsp, err := c.AddCompoundService(ctx, did, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCompoundServiceResponse(rsp)
}

// GetCompoundServiceEndpointWithResponse request returning *GetCompoundServiceEndpointResponse
func (c *ClientWithResponses) GetCompoundServiceEndpointWithResponse(ctx context.Context, did string, compoundServiceType string, endpointType string, params *GetCompoundServiceEndpointParams, reqEditors ...RequestEditorFn) (*GetCompoundServiceEndpointResponse, error) {
	rsp, err := c.GetCompoundServiceEndpoint(ctx, did, compoundServiceType, endpointType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompoundServiceEndpointResponse(rsp)
}

// GetContactInformationWithResponse request returning *GetContactInformationResponse
func (c *ClientWithResponses) GetContactInformationWithResponse(ctx context.Context, did string, reqEditors ...RequestEditorFn) (*GetContactInformationResponse, error) {
	rsp, err := c.GetContactInformation(ctx, did, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContactInformationResponse(rsp)
}

// UpdateContactInformationWithBodyWithResponse request with arbitrary body returning *UpdateContactInformationResponse
func (c *ClientWithResponses) UpdateContactInformationWithBodyWithResponse(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContactInformationResponse, error) {
	rsp, err := c.UpdateContactInformationWithBody(ctx, did, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactInformationResponse(rsp)
}

func (c *ClientWithResponses) UpdateContactInformationWithResponse(ctx context.Context, did string, body UpdateContactInformationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContactInformationResponse, error) {
	rsp, err := c.UpdateContactInformation(ctx, did, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContactInformationResponse(rsp)
}

// AddEndpointWithBodyWithResponse request with arbitrary body returning *AddEndpointResponse
func (c *ClientWithResponses) AddEndpointWithBodyWithResponse(ctx context.Context, did string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddEndpointResponse, error) {
	rsp, err := c.AddEndpointWithBody(ctx, did, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddEndpointResponse(rsp)
}

func (c *ClientWithResponses) AddEndpointWithResponse(ctx context.Context, did string, body AddEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*AddEndpointResponse, error) {
	rsp, err := c.AddEndpoint(ctx, did, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddEndpointResponse(rsp)
}

// DeleteEndpointsByTypeWithResponse request returning *DeleteEndpointsByTypeResponse
func (c *ClientWithResponses) DeleteEndpointsByTypeWithResponse(ctx context.Context, did string, pType string, reqEditors ...RequestEditorFn) (*DeleteEndpointsByTypeResponse, error) {
	rsp, err := c.DeleteEndpointsByType(ctx, did, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEndpointsByTypeResponse(rsp)
}

// SearchOrganizationsWithResponse request returning *SearchOrganizationsResponse
func (c *ClientWithResponses) SearchOrganizationsWithResponse(ctx context.Context, params *SearchOrganizationsParams, reqEditors ...RequestEditorFn) (*SearchOrganizationsResponse, error) {
	rsp, err := c.SearchOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchOrganizationsResponse(rsp)
}

// DeleteServiceWithResponse request returning *DeleteServiceResponse
func (c *ClientWithResponses) DeleteServiceWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteServiceResponse, error) {
	rsp, err := c.DeleteService(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteServiceResponse(rsp)
}

// ParseGetCompoundServicesResponse parses an HTTP response from a GetCompoundServicesWithResponse call
func ParseGetCompoundServicesResponse(rsp *http.Response) (*GetCompoundServicesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompoundServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CompoundService
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddCompoundServiceResponse parses an HTTP response from a AddCompoundServiceWithResponse call
func ParseAddCompoundServiceResponse(rsp *http.Response) (*AddCompoundServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCompoundServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompoundService
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCompoundServiceEndpointResponse parses an HTTP response from a GetCompoundServiceEndpointWithResponse call
func ParseGetCompoundServiceEndpointResponse(rsp *http.Response) (*GetCompoundServiceEndpointResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompoundServiceEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetContactInformationResponse parses an HTTP response from a GetContactInformationWithResponse call
func ParseGetContactInformationResponse(rsp *http.Response) (*GetContactInformationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContactInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactInformation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateContactInformationResponse parses an HTTP response from a UpdateContactInformationWithResponse call
func ParseUpdateContactInformationResponse(rsp *http.Response) (*UpdateContactInformationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContactInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContactInformation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddEndpointResponse parses an HTTP response from a AddEndpointWithResponse call
func ParseAddEndpointResponse(rsp *http.Response) (*AddEndpointResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteEndpointsByTypeResponse parses an HTTP response from a DeleteEndpointsByTypeWithResponse call
func ParseDeleteEndpointsByTypeResponse(rsp *http.Response) (*DeleteEndpointsByTypeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEndpointsByTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchOrganizationsResponse parses an HTTP response from a SearchOrganizationsWithResponse call
func ParseSearchOrganizationsResponse(rsp *http.Response) (*SearchOrganizationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationSearchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteServiceResponse parses an HTTP response from a DeleteServiceWithResponse call
func ParseDeleteServiceResponse(rsp *http.Response) (*DeleteServiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of compound services for a DID document.
	//
	// error responses:
	// * 400 - incorrect input
	// * 404 - unknown DID
	// (GET /internal/didman/v1/did/{did}/compoundservice)
	GetCompoundServices(ctx echo.Context, did string) error
	// Add a compound service to a DID Document.
	// (POST /internal/didman/v1/did/{did}/compoundservice)
	AddCompoundService(ctx echo.Context, did string) error
	// Retrieves the endpoint with the specified endpointType from the specified compound service.
	// (GET /internal/didman/v1/did/{did}/compoundservice/{compoundServiceType}/endpoint/{endpointType})
	GetCompoundServiceEndpoint(ctx echo.Context, did string, compoundServiceType string, endpointType string, params GetCompoundServiceEndpointParams) error

	// (GET /internal/didman/v1/did/{did}/contactinfo)
	GetContactInformation(ctx echo.Context, did string) error
	// Add a predetermined DID Service with real life contact information
	// (PUT /internal/didman/v1/did/{did}/contactinfo)
	UpdateContactInformation(ctx echo.Context, did string) error
	// Add a service endpoint or a reference to a service.
	// (POST /internal/didman/v1/did/{did}/endpoint)
	AddEndpoint(ctx echo.Context, did string) error

	// (DELETE /internal/didman/v1/did/{did}/endpoint/{type})
	DeleteEndpointsByType(ctx echo.Context, did string, pType string) error

	// (GET /internal/didman/v1/search/organizations)
	SearchOrganizations(ctx echo.Context, params SearchOrganizationsParams) error
	// Remove a service from a DID Document.
	// (DELETE /internal/didman/v1/service/{id})
	DeleteService(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCompoundServices converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompoundServices(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompoundServices(ctx, did)
	return err
}

// AddCompoundService converts echo context to params.
func (w *ServerInterfaceWrapper) AddCompoundService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddCompoundService(ctx, did)
	return err
}

// GetCompoundServiceEndpoint converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompoundServiceEndpoint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// ------------- Path parameter "compoundServiceType" -------------
	var compoundServiceType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "compoundServiceType", runtime.ParamLocationPath, ctx.Param("compoundServiceType"), &compoundServiceType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter compoundServiceType: %s", err))
	}

	// ------------- Path parameter "endpointType" -------------
	var endpointType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "endpointType", runtime.ParamLocationPath, ctx.Param("endpointType"), &endpointType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endpointType: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCompoundServiceEndpointParams
	// ------------- Optional query parameter "resolve" -------------

	err = runtime.BindQueryParameter("form", true, false, "resolve", ctx.QueryParams(), &params.Resolve)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resolve: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCompoundServiceEndpoint(ctx, did, compoundServiceType, endpointType, params)
	return err
}

// GetContactInformation converts echo context to params.
func (w *ServerInterfaceWrapper) GetContactInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetContactInformation(ctx, did)
	return err
}

// UpdateContactInformation converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateContactInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateContactInformation(ctx, did)
	return err
}

// AddEndpoint converts echo context to params.
func (w *ServerInterfaceWrapper) AddEndpoint(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddEndpoint(ctx, did)
	return err
}

// DeleteEndpointsByType converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEndpointsByType(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "did" -------------
	var did string

	err = runtime.BindStyledParameterWithLocation("simple", false, "did", runtime.ParamLocationPath, ctx.Param("did"), &did)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter did: %s", err))
	}

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "type", runtime.ParamLocationPath, ctx.Param("type"), &pType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteEndpointsByType(ctx, did, pType)
	return err
}

// SearchOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) SearchOrganizations(ctx echo.Context) error {
	var err error

	ctx.Set(JwtBearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchOrganizationsParams
	// ------------- Required query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, true, "query", ctx.QueryParams(), &params.Query)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter query: %s", err))
	}

	// ------------- Optional query parameter "didServiceType" -------------

	err = runtime.BindQueryParameter("form", true, false, "didServiceType", ctx.QueryParams(), &params.DidServiceType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter didServiceType: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchOrganizations(ctx, params)
	return err
}

// DeleteService converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteService(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(JwtBearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteService(ctx, id)
	return err
}

// PATCH: This template file was taken from pkg/codegen/templates/echo/echo-register.tmpl

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

type Preprocessor interface {
	Preprocess(operationID string, context echo.Context)
}

type ErrorStatusCodeResolver interface {
	ResolveStatusCode(err error) int
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	// PATCH: This alteration wraps the call to the implementation in a function that sets the "OperationId" context parameter,
	// so it can be used in error reporting middleware.
	router.GET(baseURL+"/internal/didman/v1/did/:did/compoundservice", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("GetCompoundServices", context)
		return wrapper.GetCompoundServices(context)
	})
	router.POST(baseURL+"/internal/didman/v1/did/:did/compoundservice", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("AddCompoundService", context)
		return wrapper.AddCompoundService(context)
	})
	router.GET(baseURL+"/internal/didman/v1/did/:did/compoundservice/:compoundServiceType/endpoint/:endpointType", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("GetCompoundServiceEndpoint", context)
		return wrapper.GetCompoundServiceEndpoint(context)
	})
	router.GET(baseURL+"/internal/didman/v1/did/:did/contactinfo", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("GetContactInformation", context)
		return wrapper.GetContactInformation(context)
	})
	router.PUT(baseURL+"/internal/didman/v1/did/:did/contactinfo", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("UpdateContactInformation", context)
		return wrapper.UpdateContactInformation(context)
	})
	router.POST(baseURL+"/internal/didman/v1/did/:did/endpoint", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("AddEndpoint", context)
		return wrapper.AddEndpoint(context)
	})
	router.DELETE(baseURL+"/internal/didman/v1/did/:did/endpoint/:type", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("DeleteEndpointsByType", context)
		return wrapper.DeleteEndpointsByType(context)
	})
	router.GET(baseURL+"/internal/didman/v1/search/organizations", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("SearchOrganizations", context)
		return wrapper.SearchOrganizations(context)
	})
	router.DELETE(baseURL+"/internal/didman/v1/service/:id", func(context echo.Context) error {
		si.(Preprocessor).Preprocess("DeleteService", context)
		return wrapper.DeleteService(context)
	})

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xafY/cttH/KgPlAWw/2Fvd+YwAXaAoHF9SXOvEzp3dAM0ZBVecXTGmSIWk9rw19rsX",
	"Q1ISpdXeS842ErT/JD4uX4bz8pvfDPUxK3RVa4XK2WzxMbNFiRXz/3xBPzSKX6LZiAJpiKMtjKid0Cpb",
	"ZM+hMMjoDzD4a4PWwUobYFDElWDDUrgWrgRUvNZCOQtM8VwbMLhCg6pAC073P8+zWVYbXaNxAr0kgtN/",
	"3bbGbJFZZ4RaZ7tZFnf/Ni6cErBiNRRaOSaUUOtOnuTkKMvgdPzAqlr6G7PGldki44IvVOPs4uT05Onp",
	"05N8dPZfSLg/+8m7WSupXv6ChesHxuLRKOgVuBK78+fwPdvCEmFlEOUWilJri4qkGt1/N8tI68IgzxY/",
	"k47ilH3FvJsQaWTd1wOF/1Y7u5K5Vt820Sm8Sa5ooWCKrojClWiALa2WjUsnDJxj3x/+Z/jE8PeyuXKs",
	"cOdqpU3FgjD7qrPoSLgiTAbRzwZUzpANxgbBigm5v5cfBsa5QWu9zyjaSkJthDbCbcE2da2N27/kLFOs",
	"mlAdOVKhq0oruYX3Sl8roImtNls710ZvBEcztXFdajWxsx/+oamWaLyopViXdxL0GpdWuIkd3168bOWq",
	"m6UUBcSpYVRYiMEHr6O4c3jBFHgDEiQy+KFxFmyNhViJAmq2jlhaaYMDy7Clbpw/SmmO5NxQ6mvaJNrx",
	"dkfyCm/VM4s27a835VA3RWChq6VQQTq6L/k8ifX24uUnRHjVBRB4dRMsdUHudai0R5m41SDKk+h+ejod",
	"2fhqg4YbVpTuaFWKSYf6HaJ7++MtsH4fE+F/vRGi/vEuir9AW2tlvUh31WOaJFsb3CzRjaK8MmumxL+9",
	"eS+RmaK8QNvIQwZ0ZgvGT6CEuTK68lrTtIsOu4D12+z7Bhf8TBdNheFa/2dwlS2y+TzfcJNvTuZbVsmv",
	"8p5p5pFm5mfnZ93C3SzTiciTYobbQRhfkqAk48qTEFROuO0MKs1RSuTArOcoqsDa0R8RR5HDcgv/eHHx",
	"yMKrGtXz1+cdxPqT53CJCKVztV3kObnmEYHq3CDjrkSuCzsXOkeVS+bQupxw2eYcNyh1TXfJT482xbx0",
	"lfSpJPq6Ba3guhRF2UplgRlscwtJ3MJ2idtH9IszTeEag3x+pbI9G++mRiwWDaWsS1JxMM8v1+4bZAbN",
	"c09qIsundUs/3O9Ml852tA0llwkTjHXl73d2fgYVU2yNdHkoUdZo4Pnr88j81prJLufRFsIzfpoHjFdC",
	"CesMc2JDOc2hWbFYE4RNaX9Pz6QoMMZUYAfZX1+/3Jz68BfOg4lPmCTP936pl8JLnM2yDRobrnEyP54f",
	"e4erUbFaZIvs1A/Nspq50ist96IoJnMueMVUvjmhf+UfueC7vKW+ti+O1uidn+LCq+ack4DoRkyb2JOJ",
	"6OAPenp8TP+jPB3jh9W1jPrNf7EhFELE+FzpsLJJmE0G1rh4612FGcO2wcb78COFjeRvyOy961KokWp5",
	"jNj5lTp3gB8K2XCM4cXkxFop3iPsk0/yaS/FikVY6oEjcLwcjdHmX626PI4EJ2+qipltUDCwG+QOlcpI",
	"7CvlN4bODosr9f/w7PgYjkCoQhuDnvnWjQs/PIMjaFTgm2fnZyEY2doSCLdHZe+IXDLDKnRo6KcpQoiq",
	"0Bw57XI4DT7LKACJlDJXZi0XpilZmgCcaXCWeMY4WbybZbW2U4DPObC+atNRQy0UhzouqZW0okQQWGdf",
	"pTWWAJhRrRXi/D1ubZttqQATipMb44Ca011yknTmhzdMNmjbWs0PDfsCaeq28ys1LCWrkMrjSutLAUN/",
	"tpQjvdcMloEkb6FqrKOFBq2WG7aUCNclqoGkwobC16Pvm6Fgfv1KSxnQGoJTe2+bqjVHycej1MV3L46P",
	"v/be+KYFxmshJTBpNRQlFu9BrIAl7Mpz/+6iga9JSktbwA/Chkq7x1ilHVTIYjHB+UCPfQy4xqj7RwAN",
	"/gmOEj+6VTofNkN8fM75GKqCh6N132i+vRcy3gMQE2K8G7IqCqrdAyH6Xsg8jcR7vZWSWVgiKjIk8jYy",
	"Uvd+OJgGXNhv64wBYj4Nf7vZ/bJm/rEYKuPNtsZd3npp/rH9lx9PcuxQXRfojMANwUXKoHt37EIv3a+n",
	"uP3v45uHDBcjJMWGluZ3fYdui1ZnjwPRa3GGqb7PFdJA2ODJ/bIRPMb5eu6PXIsNqt5EdCNh1SM3YcAn",
	"kyE82zd00g8LS76Go0k8MwgKrfN+qIEj1oOeHYGPUBsmBScsDkh8zbZTCLDPkLrK9pZ0+lOJfmOnI4yn",
	"Ms7hJ4/npgk1ba+yzkGEHdSpYmhpHJm4mzjwjhWsmLR7i9NdLcrVHM5CYIaUZhoMhN4n+V8bNNs+y8e7",
	"ZBOZfam1RKZCav9sCLVXw/pCAz+4vJZMjDYac45JMBvrMhii6zfs+aGwUZs+9SYh+LfLVz9QAo0wNwMS",
	"i7JkTBnkkKXRzTpEPit87Vci42jgcX+HJ5+Cen5G3PlD0MvZWIDLFIyiqfdsm3TlB2pzuudjyIfCr1FL",
	"HXx5WvSJPPKwq3zr+yGRVk4lxERWonddc+mQ3EcGrTuiWnPyAqmH3I/j3yHp+sKrLegPl6l7jwOflQXt",
	"nXYAO1jhGibb8hGSFa2LDYq73xrWbbilzx6/z4qumaBA5woKZn3QYYVmjarYUkaOrSXw4Ci0sgldb99I",
	"ILqCr+VI3vCEYEvdSH6l4rThexCrQj+wKUrfZlPJsf4BAVR4SSF4b4UYPAfFugeNR3vmoNJUwqvuoKP0",
	"eaOTOVR08wke8bbmzOEBL/4c9cS0A3/JQuKuITRKt+S0JdtgWk5QhdqD2+eqLGqDnEKpEioETPcC5pOm",
	"QSZBihVOPT5mB2P0VgRMW+5/jAbNGw1cWIrJRtgyUIa93tYsNFTbbNuX4VJSeipY6IL3jJe4VMho3bui",
	"nd5D2G6571UbdJjQ3ivl7TnuTLChj3VlY2tkoWigRWrfMuqaHoVWGzSOiHS3br+xMKq+LMbZby9ezr9c",
	"G2XPEi2Y+WsXdFT4tCEUfn2xeOvD2O+oLZNUYZ8DPydeKL8wfnYXPICanf58If/l2i/tuXiD29xSKNwZ",
	"EfOPrm2tcJQ49RXDmR8HJmXSdu18KrIDHvyqK20GzaKbnLpiMiA8lW7er2fhuaDdRZtRmbCtKUxa349T",
	"Rr7eIhpFrn8cnPeBMerwJmX9cguDaJwKjKCN1nXsN9uOsA+89NlEz50U+CGA+liTI7Gv0b8KFgXaVSMl",
	"lbt0Kn/Ag8kfsJp8k1SRtusN9zIkXwVMS+A+VS0Vnr3z9HXaHiylwlP7q8HcL/Hid/C5/w5PfwNpp74C",
	"aB/+H+x9tM3tvvdjg2YLjUUeX1RoWdsxSM1AMUvWDmTCN9IoqCvmirJH6XTFIxs+GPNc5PLHl48sXGUv",
	"z//+7VUGK2ZLodWCSEjYwkLNjBNMQnAS/9lgYBa0iw0vZdaTgQ62At32wsy6RzJfFTlRgDNM2eTDLbnW",
	"RriyCjVN797/1GZdoHKmqYAjXGjNN0K9P9A0bP98QLx9JySZY6AtSwruusN7zbvYHxmseDSox+Gx9vsz",
	"+WR+KHqPDBYoNv47hKm7cTHq6/yWCI4PDoLfmOwusNIbTJKwjwB293x2P5L2KXJR+mx2Ww5KaU1HaIy/",
	"M/8U/dA7KO/Bnc128xtT0ldx1tGH6dRw3zot/bCG5KPoGX1V8/M7Kufo3PYOjZHxk5pFnktdMFlq6xYn",
	"p09Ps9273X8CAAD//0hU1397LwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
